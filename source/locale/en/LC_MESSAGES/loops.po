# 
msgid ""
msgstr ""
"Project-Id-Version: Introduction to Programming with Python 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-25 09:37\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/loops.rst:2
msgid "Loops"
msgstr ""

#: ../../../source/loops.rst:5
msgid "Introduction"
msgstr ""

#: ../../../source/loops.rst:7
msgid ""
"Something you might have noticed: our programs often feature repetition. "
"Python has a powerful concept it makes use of called looping (jargon: "
"*iteration*), which we can use to cut out our reptitive code! For now, **try"
" this easy example**::"
msgstr ""

#: ../../../source/loops.rst:15
msgid ""
"This is incredibly helpful if we want to do something multiple times --- "
"say, drawing the individual border lines of a shape --- but only want to "
"write that action once. Here's another version of a loop::"
msgstr ""

#: ../../../source/loops.rst:22
msgid ""
"Notice how we write only one line of code using ``i``, but it takes on 10 "
"different values?"
msgstr ""

#: ../../../source/loops.rst:25
msgid ""
"The :samp:`range(n)` function can be considered a shorthand for ``0, 1, 2, "
"..., n-1``. If you want to know more about it, you can use the help in the "
"Python shell by typing ``help(range)``. Use the :kbd:`q` key to exit the "
"help again."
msgstr ""

#: ../../../source/loops.rst:30
msgid "You can also loop over elements of your choice::"
msgstr ""

#: ../../../source/loops.rst:38
msgid ""
"Write this example out and run it with python, to check it works how you "
"might expect."
msgstr ""

#: ../../../source/loops.rst:43
msgid ""
"Notice how above, the lines of code that are *looped*, are the ones that are"
" *indented*. This is an important concept in Python - that's how it knows "
"which lines should be used in the ``for`` loop, and which come after, as "
"part of the rest of your program. Use four spaces (hitting tab) to indent "
"your code."
msgstr ""

#: ../../../source/loops.rst:49
msgid ""
"Sometimes you want to repeat some code a number of times, but don't care "
"about the value of the ``i`` variable; so it can be good practice to replace"
" it with ``_`` instead. This signifies that we don't care about its value, "
"or don't wish to use it. Here's a simple example::"
msgstr ""

#: ../../../source/loops.rst:57
msgid ""
"You may or may not be wondering about the variable ``i`` - why is it used "
"all the time above? Well, it simply stands for \"index\" and is one of the "
"most common variable names ever found in code. But if you are looping over "
"something other than just numbers, be sure to name it something better! For "
"instance::"
msgstr ""

#: ../../../source/loops.rst:65
msgid ""
"This is immediately clearer to understand than if we had used ``i`` instead "
"of ``drink``."
msgstr ""

#: ../../../source/loops.rst:69
msgid "Drawing a dashed line"
msgstr ""

#: ../../../source/loops.rst:72 ../../../source/loops.rst:126
msgid "Exercise"
msgstr ""

#: ../../../source/loops.rst:74
msgid ""
"Draw a dashed line.  You can move the turtle without the turtle drawing its "
"movement by using the ``turtle.penup()`` function; to tell it to draw again,"
" use ``turtle.pendown()``."
msgstr ""

#: ../../../source/loops.rst:81 ../../../source/loops.rst:133
msgid "Solution"
msgstr ""

#: ../../../source/loops.rst:92 ../../../source/loops.rst:142
msgid "Bonus"
msgstr ""

#: ../../../source/loops.rst:94
msgid "Can you make the dashes become larger as the line progresses?"
msgstr ""

#: ../../../source/loops.rst:100
msgid "Feeling lost?  Inspect ``i`` at every run of the loop::"
msgstr ""

#: ../../../source/loops.rst:106
msgid ""
"Can you utilize ``i`` --- commonly called the **index** variable or loop "
"variable --- to get increasing step sizes?"
msgstr ""

#: ../../../source/loops.rst:110
msgid "Comments"
msgstr ""

#: ../../../source/loops.rst:112
msgid ""
"In the example above, the line that starts with a ``#`` is called a comment."
" In Python, anything that goes on a line after ``#`` is ignored by the "
"computer. Use comments to explain what your program does, without changing "
"the behaviour for the computer. They can also be used to easily and "
"temporarily disable, or \"comment out\" some lines of code."
msgstr ""

#: ../../../source/loops.rst:118
msgid "Comments can also go at the end of a line, like this::"
msgstr ""

#: ../../../source/loops.rst:123
msgid "More Efficient Squares"
msgstr ""

#: ../../../source/loops.rst:128
msgid ""
"The squares we were drawing at the start of this tutorial had a lot of "
"repeated lines of code. Can you write out a square drawing program in fewer "
"lines by utilizing loops?"
msgstr ""

#: ../../../source/loops.rst:144
msgid ""
"Try *nesting* loops, by putting one right under (*inside*) the other, with "
"some drawing code that's inside both. Here's what it can look like::"
msgstr ""

#: ../../../source/loops.rst:155
msgid ""
"Replace the ``...``'s with your own code, and see if you can come up with "
"something funny or interesting! :sup:`Mistakes are encouraged!`"
msgstr ""
