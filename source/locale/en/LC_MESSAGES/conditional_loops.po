# 
msgid ""
msgstr ""
"Project-Id-Version: Introduction to Programming with Python 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-25 09:37\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/conditional_loops.rst:2
msgid "Conditional Loops"
msgstr ""

#: ../../../source/conditional_loops.rst:4
msgid "Introduction"
msgstr ""

#: ../../../source/conditional_loops.rst:6
msgid ""
"Conditional loops are way to repeat something while a certain condition is "
"satisfied, or **True**. If the condition is always satisfied (never becomes "
"**False**), the loop can become infinite. If the condition starts off false,"
" the code in the loop will never run! In Python conditional loops are "
"defined with the ``while`` statement::"
msgstr ""

#: ../../../source/conditional_loops.rst:23
msgid "We call this part of the code the 'conditional': ``'.' not in word``"
msgstr ""

#: ../../../source/conditional_loops.rst:25
msgid ""
"Whether the conditional return True or not determines whether the code "
"inside the ``while`` loop runs."
msgstr ""

#: ../../../source/conditional_loops.rst:28
msgid ""
"Read the code above, and see if you can summarise in your head what it what "
"it do (what its final output will be)."
msgstr ""

#: ../../../source/conditional_loops.rst:31
msgid ""
"Then copy it into a file, say :file:`sentence.py` and run it - see exactly "
"what it does. Does that match up with what you thought?"
msgstr ""

#: ../../../source/conditional_loops.rst:36
msgid ""
"If you are using Python 2, you will need to replace ``input`` with "
"``raw_input`` to run the program correctly."
msgstr ""

#: ../../../source/conditional_loops.rst:40
msgid "Turtle prison"
msgstr ""

#: ../../../source/conditional_loops.rst:43
#: ../../../source/conditional_loops.rst:87
msgid "Exercise"
msgstr ""

#: ../../../source/conditional_loops.rst:45
msgid ""
"The turtle has been up to its usual tricks again, robbing liqour stores and "
"building up huge gambling debts. It's time for turtle to be put into a cell "
"that it can't get out of."
msgstr ""

#: ../../../source/conditional_loops.rst:49
msgid ""
"Let's make a new version of ``forward()``. One that will turn the turtle "
"around if it tries to go further than 100 from the origin. We'll need a "
"``while`` loop, and some new turtle functions:"
msgstr ""

#: ../../../source/conditional_loops.rst:53
msgid "``turtle.distance(0,0)`` - Distance of the turtle from the origin"
msgstr ""

#: ../../../source/conditional_loops.rst:54
msgid "``turtle.towards(0,0)`` - The angle to get back to origin"
msgstr ""

#: ../../../source/conditional_loops.rst:55
msgid "``turtle.setheading(angle)`` - Directly sets the turtle direction"
msgstr ""

#: ../../../source/conditional_loops.rst:57
msgid ""
"You could try playing with a turtle in the interpreter and using these "
"functions to check exactly what they do, if you like."
msgstr ""

#: ../../../source/conditional_loops.rst:60
msgid ""
"Now you will need to implement the prison logic using these turtle "
"functions, perhaps a ``while`` loop and a bit of conditional logic. It's a "
"bit of a stretch but keep at it! Don't be afraid to talk it out with a coach"
" or another student."
msgstr ""

#: ../../../source/conditional_loops.rst:66
#: ../../../source/conditional_loops.rst:104
msgid "Solution"
msgstr ""

#: ../../../source/conditional_loops.rst:80
msgid "Draw a spiral"
msgstr ""

#: ../../../source/conditional_loops.rst:82
msgid ""
"Loops can be interrupted with the ``break`` statement. This is especially "
"useful if you write an *infinite loop*, which is a loop where the "
"conditional is always **True**."
msgstr ""

#: ../../../source/conditional_loops.rst:89
msgid ""
"Write a ``while`` loop with a condition that is always **True** to draw a "
"spiral. Interrupt the loop when the turtle reaches a certain distance from "
"the center. Use the function ``turtle.distance(x, y)`` to get the turtle's "
"distance to the point defined by the coordinates ``x`` and ``y``."
msgstr ""

#: ../../../source/conditional_loops.rst:94
msgid ""
"To do this you will need the ``turtle.xcor()`` and ``turtle.ycor()`` "
"functions, which return the position of the turtle in X and Y axes "
"respectively."
msgstr ""

#: ../../../source/conditional_loops.rst:100
msgid ""
"To draw a spiral, the turtle has to rotate by a constant value and move "
"forward by an increasing value."
msgstr ""

#: ../../../source/conditional_loops.rst:120
msgid "Bonus"
msgstr ""

#: ../../../source/conditional_loops.rst:122
msgid ""
"Can you make a conditional for this loop, so you don't need the infinite "
"loop ``while True`` or the ``break``? Which version do you find easier to "
"understand?"
msgstr ""
