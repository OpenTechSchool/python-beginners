# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012–2014, OpenTechSchool and contributors
# This file is distributed under the same license as the Introduction to Programming with Python package.
# 
# Translators:
# sorrymak <dearalcher@gmail.com>, 2013-2015
msgid ""
msgstr ""
"Project-Id-Version: Python for beginners\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-02 06:32+1000\n"
"PO-Revision-Date: 2015-01-16 12:40+0000\n"
"Last-Translator: sorrymak <dearalcher@gmail.com>\n"
"Language-Team: Russian (http://www.transifex.com/opentechschool/python-for-beginners/language/ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../../source/functions.rst:2
msgid "User-defined functions"
msgstr "Функции, определяемые пользователем"

#: ../../../source/functions.rst:5
msgid "Introduction"
msgstr "Введение"

#: ../../../source/functions.rst:7
msgid ""
"Programmers can deal with some pretty complex and abstract problems, but one"
" sign of a good programmer is that they're lazy. They only like to deal with"
" one thing at a time. So you need a way to break up problems into smaller, "
"discrete pieces, which lets you focus on just the piece you want to."
msgstr "В программировании часто приходится встречаться с достаточно сложными задачами, а, как известно, одна из характерных черт программистов — ленивость. Расправившись с трудностью один раз, они не хотят делать это вновь. Также тебе понадобится что-то, с помощью чего можно разбивать задачи на маленькие и независимые друг от друга кусочки, чтобы сфокусировать свои усилия над теми из них, которые тебе нужны."

#: ../../../source/functions.rst:12
msgid ""
"Functions are one way to do this abstraction in Python. Let's take "
"``turtle.reset()`` for example. ``reset`` is a function we call on our "
"``turtle``, and it is actually an abstraction for a number of steps, namely:"
msgstr "Функции -- один из способов в Python выразить эту абстракцию. В качестве примера рассмотрим ``turtle.reset()``. ``reset`` -- это функция, которая вызывает нашу черепашку (``turtle``) для выполнения некоторых действий, а именно:"

#: ../../../source/functions.rst:16
msgid "Erase the drawing board."
msgstr "Очищение доски для рисования."

#: ../../../source/functions.rst:17
msgid "Set the width and color back to default."
msgstr "Возвращение ширины и цвета в исходное состояние."

#: ../../../source/functions.rst:18
msgid "Move the turtle back to its initial position."
msgstr "Возвращение черепашки в исходное положение"

#: ../../../source/functions.rst:20
msgid ""
"But because all the code is contained in the function, we don't have to "
"worry about these details. We can simply *call* this function, and know it "
"will do what it says for us."
msgstr "Но так как весь код заключён в функцию, нам не нужно беспокоиться о деталях. Мы просто *вызываем* её."

#: ../../../source/functions.rst:23
msgid "So - how to write your own?"
msgstr "Итак — как же написать её?"

#: ../../../source/functions.rst:25
msgid "A function can be defined with the ``def`` keyword in Python::"
msgstr "Функции в Python могут быть определены ключевым словом ``def``::"

#: ../../../source/functions.rst:31
msgid ""
"This function we defined is called ``line_without_moving`` and it is an "
"abstraction for two turtle steps - a move forward and a move backward."
msgstr "Определённая нами функция называется ``line_without_moving`` и она является абстракцией для двух шагов - движения вперёд и движения назад."

#: ../../../source/functions.rst:35
msgid ""
"To use it (or as it is usually called, \"to call it\"), write its name "
"followed by parentheses::"
msgstr "Чтобы использовать её (или, как обычно говорят \"вызвать её\"), напиши её имя и круглые скобки сразу за ним:"

#: ../../../source/functions.rst:46
msgid "We could write more functions to remove some of the repetition::"
msgstr "Мы можем написать больше функций, чтобы избавиться от некоторых повторений::"

#: ../../../source/functions.rst:57
msgid ""
"Python uses *indenting with whitespace* to identify blocks of code that "
"belong together. In Python a block (like the function definitions shown "
"above) is introduced with a colon at the end of the line and subsequent "
"commands are indented --- usually 4 spaces further in. The block ends with "
"the first line that isn't indented."
msgstr "В Python используются *отступы из пробелов/табуляций* для идентификации блоков кода, которые связаны друг с другом. Блок в Python'е (как показанное выше определение функции) должен иметь двоеточие в конце строки, а последующие команды -- отступы (обычно, размером в 4 пробела). Блок заканчивается первой линией без отступа в начале строки."

#: ../../../source/functions.rst:63
msgid ""
"This is different to many other programming languages, which use special "
"characters (like curly braces ``{}``) to group blocks of code together."
msgstr "Это отличается от многих других языков программирования, в которых для определения связанных блоков кода используются специальные символы (такие как фигурные скобки ``{}``)"

#: ../../../source/functions.rst:67
msgid ""
"Never use tab characters to indent your blocks, only spaces. You can -- and "
"should -- configure your editor to put 4 spaces when you press the tab key. "
"The problem with using tab characters is that other python programmers use "
"spaces, and if both are used in the same file python will read it wrong (in "
"the best place, it will complain, and in the worst case, weird, hard to "
"debug bugs will happen)."
msgstr "Никогда не используй табуляцию для выделения своих блоков, только пробелы. Ты можешь -- и должен -- настроить свой редактор, чтобы тот вставлял 4 пробела, когда ты нажимаешь клавишу Tab"

#: ../../../source/functions.rst:76
msgid "A function for a square"
msgstr "Функция для рисования квадрата"

#: ../../../source/functions.rst:79 ../../../source/functions.rst:120
msgid "Exercise"
msgstr "Упражнение"

#: ../../../source/functions.rst:81
msgid ""
"Write a function that draws a square. Could you use this function to improve"
" the tilted squares program? If you change the program to use a function, is"
" it easier to experiment with?"
msgstr "Напиши функцию для рисования квадрата. Можешь ли ты использовать эту функцию для улучшения программы для рисования повёрнутых квадратов? Если ты внедришь в программу функции, с ней будет легче экспериментировать?"

#: ../../../source/functions.rst:88 ../../../source/functions.rst:142
msgid "Solution"
msgstr "Решение"

#: ../../../source/functions.rst:117
msgid "A function for a hexagon"
msgstr "Функция для рисования шестиугольника"

#: ../../../source/functions.rst:122
msgid "Write a function that draws a hexagon."
msgstr "Напишите функцию для рисования шестиугольника"

#: ../../../source/functions.rst:126
msgid ""
"Now combine that function into a honeycomb. Just make it with a single layer"
" like this:"
msgstr "Теперь комбинируй эту функцию, чтобы нарисовать соты. Просто сделай однослойную картинку, как эта:"

#: ../../../source/functions.rst:130
msgid "Give it a good go!"
msgstr ""

#: ../../../source/functions.rst:134
msgid ""
"Make sure your hexagon function returns your turtle to exactly the same "
"position and angle it was before it was asked to draw the hexagon. This "
"makes it easier to reason about."
msgstr "Убедись в том, что функция рисования шестиугольника возвращает черепашку в исходную точку. "

#: ../../../source/functions.rst:156
msgid ""
"You could also put the ``turtle.forward(100); turtle.right(60)`` portion in "
"the function, but you better not call it ``hexagon`` in that case.  That's "
"misleading because it actually draws a hexagon and then advances to a "
"position where another hexagon would make sense in order to draw a "
"honeycomb.  If you ever wanted to reuse your hexagon function outside of "
"honeycombs, that would be confusing."
msgstr ""
