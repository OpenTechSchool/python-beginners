# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012–2014, OpenTechSchool and contributors
# This file is distributed under the same license as the Introduction to Programming with Python package.
# 
# Translators:
# Seong-ho Cho <darkcircle.0426@gmail.com>, 2014
msgid ""
msgstr ""
"Project-Id-Version: Python for beginners\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-06-09 11:00+1000\n"
"PO-Revision-Date: 2014-02-23 11:19+0000\n"
"Last-Translator: Seong-ho Cho <darkcircle.0426@gmail.com>\n"
"Language-Team: Korean (http://www.transifex.com/projects/p/python-for-beginners/language/ko/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# a670b4adde8c406d82ba760f46e490e7
#: ../../../source/loops.rst:2
msgid "Loops"
msgstr "순환"

# c28e242bdab04161a6fa4929c1a38088
#: ../../../source/loops.rst:5
msgid "Introduction"
msgstr "소개"

# a3fc99c9e8944a20bde6325f9a5a67fc
#: ../../../source/loops.rst:7
msgid ""
"Something you might have noticed: our programs often feature repetition. "
"Python has a powerful concept it makes use of called looping (jargon: "
"*iteration*), which we can use to cut out our reptitive code! For now, **try"
" this easy example**::"
msgstr "아마 다음과 같은걸 본 적이 있을거예요: 우리 프로그램엔 자주 반복하는 기능이 있어요. 파이썬엔 순환 반복(용어: *반복*)이라고 하는 강력한 개념이 있는데, 반복 코드 일부를 똑 떼어내는데 사용할 수 있어요! 자, 그러면 **이 간단한 예제를 해보도록 해요**::"

# 4eda734b95e248539b9b5efe8dc5119c
#: ../../../source/loops.rst:15
msgid ""
"This is incredibly helpful if we want to do something multiple times --- "
"say, drawing the individual border lines of a shape --- but only want to "
"write that action once. Here's another version of a loop::"
msgstr "무언가를 여러번 돌리고 싶을때 매우매우 도움이 돼요 --- 도형의 테두리선을 각각 그릴 경우 말이죠? ---  근데 동작은 단 한번에 대해서만 적고 싶을 때가 있어요. 순환 반복의 다른 버전을 보도록 할께요::"

# 0e367bb15a554f55aabf4f8a1d0eb292
#: ../../../source/loops.rst:22
msgid ""
"Notice how we write only one line of code using ``i``, but it takes on 10 "
"different values?"
msgstr "이제 어떻게 ``i`` 변수를 사용해서 코드 한 줄을 작성하더라도 각기 다른 10가지 값을 가질 수 있는지 볼까요?"

# 2178e72a59a246b380c09058a79f3b64
#: ../../../source/loops.rst:25
msgid ""
"The :samp:`range(n)` function can be considered a shorthand for ``0, 1, 2, "
"..., n-1``. If you want to know more about it, you can use the help in the "
"Python shell by typing ``help(range)``. Use the :kbd:`q` key to exit the "
"help again."
msgstr ":samp:`range(n)` 함수는 ``0, 1, 2, ..., n-1``을 짧게 줄인걸로 볼 수 있어요. 더 알아보시려면 파이썬 쉘에서 ``help(range)``를 쳐서 도움말을 보실 수 있어요. :kbd:``q`` 키를 사용하면 도움말에서 다시 나갈 수 있어요."

# b45f5ff4bf2c43f183e91d7d594ed56b
#: ../../../source/loops.rst:30
msgid "You can also loop over elements of your choice::"
msgstr "여러분이 고른 요소에 대해서도 순환 반복 동작을 할 수 있어요::"

# 3da3b4e9c91347318018908166b6e30b
#: ../../../source/loops.rst:39
msgid ""
"Write this example out and run it with python, to check it works how you "
"might expect."
msgstr "이 예제 코드를 그대로 작성하고 파이선으로 실행해서, 여러분이 기대한 바와 동작이 같은지 확인해보세요."

# 419b4a124acb4eb59c15f22b56f01c7d
#: ../../../source/loops.rst:44
msgid ""
"Notice how above, the lines of code that are *looped*, are the ones that are"
" *indented*. This is an important concept in Python - that's how it knows "
"which lines should be used in the ``for`` loop, and which come after, as "
"part of the rest of your program. Use four spaces (hitting tab) to indent "
"your code."
msgstr "위에서 어떻게 돌아가는지 보시면, *순환 반복*하는 코드 줄을 *들여쓰기* 했어요. 파이선에 있어 중요한 개념이죠. 어떤 코드 줄이 ``for`` 순환 반복 구문에서 사용해야 하는지 알 수 있기도 하고, 그 다음  프로그램 나머지 부분에는 어떤 요소가 따라오는지 알 수 있기도 하죠. 코드를 들여쓰기 하려면 공백 문자 네 개(그냥 탭 키를 치세요)를 사용하세요."

# 78984f3a1e8442cfa8a190d0e891d912
#: ../../../source/loops.rst:50
msgid ""
"Sometimes you want to repeat some code a number of times, but don't care "
"about the value of the ``i`` variable; so it can be good practice to replace"
" it with ``_`` instead. This signifies that we don't care about its value, "
"or don't wish to use it. Here's a simple example::"
msgstr "어떤 경우는 일부 코드를 여러번 반복하려 하지만 ``i`` 변수 값은 신경 쓰고 싶지 않을때가 있어요. 이때는 ``_``를 대신 사용하는게 좋은 습관이 될 수 있어요. 이걸 쓰면 값이 어떤지 신경 쓰고 싶지도 않고 쓰고 싶지도 않음을 의미해요. 간단한 예를 보여드릴께요::"

# 871317829ed94000a175e3f14de9929d
#: ../../../source/loops.rst:58
msgid ""
"You may or may not be wondering about the variable ``i`` - why is it used "
"all the time above? Well, it simply stands for \"index\" and is one of the "
"most common variable names ever found in code. But if you are looping over "
"something other than just numbers, be sure to name it something better! For "
"instance::"
msgstr "``i`` 변수가 어떤 값을 지니고 있는지 궁금해 할 수도, 안 할 수도 있어요. 위에서는 왜 항상 사용했을까요? 흠, 간단하게 말하자면 \"인덱스\"를 의미하는데 대부분의 코드 어디에서든 찾을 수 있는 일반적인 변수 이름일 뿐이예요. 어떤 숫자가 아니라 다른 기준 이상으로 순환 반복을 한다면, 이름을 확인해보는게 좋아요! 가령 다음 같으면요::"

# 37f8ea014b43476ca95f290eb2bca3fb
#: ../../../source/loops.rst:66
msgid ""
"This is immediately clearer to understand than if we had used ``i`` instead "
"of ``drink``."
msgstr "``drink`` 대신에 ``i``를 썼을때보다는 바로 이해하기에 확실하죠."

# 6a8658daf4c747ce8dae0e01b03494dc
#: ../../../source/loops.rst:70
msgid "Drawing a dashed line"
msgstr "점선을 그려보아요"

# 227cdb5260a44d39a186ef36b46495d0
# 811e324008784846b8ac8fa984cb2b27
#: ../../../source/loops.rst:73 ../../../source/loops.rst:129
msgid "Exercise"
msgstr "연습"

# 0f7e6111e19948c2bf97205484a3cba2
#: ../../../source/loops.rst:75
msgid ""
"Draw a dashed line.  You can move the turtle without the turtle drawing its "
"movement by using the ``turtle.penup()`` function; to tell it to draw again,"
" use ``turtle.pendown()``."
msgstr "점선을 그려보세요. ``turtle.penup()`` 함수를 사용해서 거북이가 선을 그리지 않고 그냥 움직이게만 할 수 있어요. 다시 그리라고 하려면 ``turtle.pendown()``을 활용하세요."

# f3965d438fa44b27916970234463ea2f
# 7e918f8e5bd7468c93f9fc02e3ad2fa9
#: ../../../source/loops.rst:84 ../../../source/loops.rst:138
msgid "Solution"
msgstr "해결책"

# 5860c34b7d5a4bb5b5095d8a1472dd11
# 112a159544464c73a08a63e7eb71691c
#: ../../../source/loops.rst:95 ../../../source/loops.rst:147
msgid "Bonus"
msgstr "덤"

# f05832d1752c4fc3931b4cbc78badfab
#: ../../../source/loops.rst:97
msgid "Can you make the dashes become larger as the line progresses?"
msgstr "한 줄 한 줄 처리할 때마다 대시 길이를 더 늘릴 수 있나요?"

# c89966a17ad8437aad6d66aedbd2396f
#: ../../../source/loops.rst:103
msgid "Feeling lost?  Inspect ``i`` at every run of the loop::"
msgstr "뭔가 부족한가요? 모든 순환 반복 실행 부분에 ``i``를 넣어보세요::"

# 6af92163948e42658b603d185d1d44b4
#: ../../../source/loops.rst:109
msgid ""
"Can you utilize ``i`` --- commonly called the **index** variable or loop "
"variable --- to get increasing step sizes?"
msgstr "크기를 단계적으로 늘이는데 ``i``를 활용할 수 있나요? 보통 순환 반복 변수라고 하거나 **인덱스** 변수라고 해요."

# c844a09532cc4786b5bf06f2ec04e19b
#: ../../../source/loops.rst:113
msgid "Comments"
msgstr "주석"

# 933b062bdf944b3d9ed1f08ac92a867e
#: ../../../source/loops.rst:115
msgid ""
"In the example above, the line that starts with a ``#`` is called a comment."
" In Python, anything that goes on a line after ``#`` is ignored by the "
"computer. Use comments to explain what your program does, without changing "
"the behaviour for the computer. They can also be used to easily and "
"temporarily disable, or \"comment out\" some lines of code."
msgstr "위의 예제에서 ``#``으 시작하는 줄을 주석이라고 해요. 파이썬에서는 ``#``으로 시작하는 줄은 컴퓨터에서 무시해요. 컴퓨터에서 동작을 바꾸지 않고 프로그램이 어떤 동작을 하는지 설명하려면 주석을 활용하세요. 잠깐 동안 쉽게 코드를 비활성화 하든지 코드 일부를 \"주석 처리\" 해버리는데 사용할 수도 있어요."

# 1168e1104a2f49a8b92d4947148d5cc4
#: ../../../source/loops.rst:121
msgid "Comments can also go at the end of a line, like this::"
msgstr "다음 처럼 줄 끝으로 주석이 들어갈 수도 있어요::"

# 11e97ad4978340f38f253f2dba5056c4
#: ../../../source/loops.rst:126
msgid "More Efficient Squares"
msgstr "더 효율적인 사각형"

# cc655afb978f493c8053e667a368d764
#: ../../../source/loops.rst:131
msgid ""
"The squares we were drawing at the start of this tutorial had a lot of "
"repeated lines of code. Can you write out a square drawing program in fewer "
"lines by utilizing loops?"
msgstr "이 따라하기 안내서 앞부분에 그렸던 사각형에는 선을 반복해서 그리는 코드가 많이 있었어요. 순환 반복 구문을 활용해서 사각형을 그리는 프로그램의 줄 수를 줄여 볼 수 있죠?"

# bed062fe01ed47d9b7e7795f6976e66a
#: ../../../source/loops.rst:149
msgid ""
"Try *nesting* loops, by putting one right under (*inside*) the other, with "
"some drawing code that's inside both. Here's what it can look like::"
msgstr "다른 순환 반복 구문의 아래(*안*)에 순환 반복 구문을 놓는 *중첩* 순환 반복 구문을 활용하고, 그리는 코드를 두 순환 반복 구문 안에 놓아보세요. 어떻게 보일 수 있을지 보여드릴께요::"

# 770ac4cbd02045699e112ac7f9e86d66
#: ../../../source/loops.rst:160
msgid ""
"Replace the ``...``'s with your own code, and see if you can come up with "
"something funny or interesting! :sup:`Mistakes are encouraged!`"
msgstr "``...``를 여러분이 작성한 코드로 바꾸고, 어떤 재밌는 또는 흥미로운 모습을 만들어냈는지 보세요! :sup:`실수해도 좋아요!`"
