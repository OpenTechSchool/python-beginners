# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2012–2014, OpenTechSchool and contributors
# This file is distributed under the same license as the Introduction to Programming with Python package.
# 
# Translators:
# Razvan Stefanescu <razvan.stefanescu@gmail.com>, 2015
msgid ""
msgstr ""
"Project-Id-Version: Python for beginners\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2015-10-02 06:32+1000\n"
"PO-Revision-Date: 2015-04-01 12:22+0000\n"
"Last-Translator: Razvan Stefanescu <razvan.stefanescu@gmail.com>\n"
"Language-Team: Romanian (http://www.transifex.com/opentechschool/python-for-beginners/language/ro/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ro\n"
"Plural-Forms: nplurals=3; plural=(n==1?0:(((n%100>19)||((n%100==0)&&(n!=0)))?2:1));\n"

#: ../../../source/functions.rst:2
msgid "User-defined functions"
msgstr "Funcții definite de utilizator"

#: ../../../source/functions.rst:5
msgid "Introduction"
msgstr "Introducere"

#: ../../../source/functions.rst:7
msgid ""
"Programmers can deal with some pretty complex and abstract problems, but one"
" sign of a good programmer is that they're lazy. They only like to deal with"
" one thing at a time. So you need a way to break up problems into smaller, "
"discrete pieces, which lets you focus on just the piece you want to."
msgstr "Programatorii pot întâlni probleme destul de complexe și abstracte, dar o caracteristică a unui bun programator este lenea. Ei doresc să aibă de-a face cu un singur lucru odată . Așa că ai nevoie să spargi problemele în bucăți mai mici, separate, care să îți permită să te concentrezi doar pe cea pe care dorești."

#: ../../../source/functions.rst:12
msgid ""
"Functions are one way to do this abstraction in Python. Let's take "
"``turtle.reset()`` for example. ``reset`` is a function we call on our "
"``turtle``, and it is actually an abstraction for a number of steps, namely:"
msgstr "Funcțiile sunt un mod de a face această abstractizare în Python. Hai să luăm ca exemplu ``turtle.reset()``. ``reset`` este o funcție pe care o apelăm pe ``turtle`` și este de fapt o abstractizare a unui număr de pași, adică:"

#: ../../../source/functions.rst:16
msgid "Erase the drawing board."
msgstr "Șterge tabla."

#: ../../../source/functions.rst:17
msgid "Set the width and color back to default."
msgstr "Setează lățimea și culoarea la valorile implicite."

#: ../../../source/functions.rst:18
msgid "Move the turtle back to its initial position."
msgstr "Mută țestoasa înapoi la poziția inițială."

#: ../../../source/functions.rst:20
msgid ""
"But because all the code is contained in the function, we don't have to "
"worry about these details. We can simply *call* this function, and know it "
"will do what it says for us."
msgstr "Dar pentru că tot codul este inclus în funcție, nu trebuie să ne facem griji pentru aceste detalii. Putem pur și simplu să *apelăm* această funcție și vom ști că va face ceea ce spune."

#: ../../../source/functions.rst:23
msgid "So - how to write your own?"
msgstr "Deci - cum să îți scrii propriile funcții?"

#: ../../../source/functions.rst:25
msgid "A function can be defined with the ``def`` keyword in Python::"
msgstr "O funcție poate fi definită în Python folosind cuvântul cheie ``def``::"

#: ../../../source/functions.rst:31
msgid ""
"This function we defined is called ``line_without_moving`` and it is an "
"abstraction for two turtle steps - a move forward and a move backward."
msgstr "Funcția pe care am definit-o se numește ``line_without_moving`` și este o abstractizare a doi pași ai țestoasei - o deplasare înainte și o deplasare înapoi."

#: ../../../source/functions.rst:35
msgid ""
"To use it (or as it is usually called, \"to call it\"), write its name "
"followed by parentheses::"
msgstr "Pentru a o utiliza (sau așa cum se spune de obicei, pentru a o *apela*), scrie numele ei urmat de paranteze::"

#: ../../../source/functions.rst:46
msgid "We could write more functions to remove some of the repetition::"
msgstr "Am putea să scriem mai multe funcții pentru a elimina repetițiile::"

#: ../../../source/functions.rst:57
msgid ""
"Python uses *indenting with whitespace* to identify blocks of code that "
"belong together. In Python a block (like the function definitions shown "
"above) is introduced with a colon at the end of the line and subsequent "
"commands are indented --- usually 4 spaces further in. The block ends with "
"the first line that isn't indented."
msgstr "Python utilizează *indentarea cu spații albe* pentru a identifica blocuri de cod care au legătură. În Python un bloc (cum sunt definițiile funcțiilor de mai sus) este introdus cu un caracter două puncte la sfârșitul unei linii și liniile următoare sunt indentate -- în mod uzual cu 4 spații."

#: ../../../source/functions.rst:63
msgid ""
"This is different to many other programming languages, which use special "
"characters (like curly braces ``{}``) to group blocks of code together."
msgstr "Asta este diferit față de multe alte limbaje de programare, care utilizează paranteze (cum ar fi acoladele ``{}``) pentru a grupa blocuri de cod."

#: ../../../source/functions.rst:67
msgid ""
"Never use tab characters to indent your blocks, only spaces. You can -- and "
"should -- configure your editor to put 4 spaces when you press the tab key. "
"The problem with using tab characters is that other python programmers use "
"spaces, and if both are used in the same file python will read it wrong (in "
"the best place, it will complain, and in the worst case, weird, hard to "
"debug bugs will happen)."
msgstr "Nu utiliza niciodată caractere tab pentru indenta blocurile tale, ci doar spații. Poți -- și ar trebui să o faci -- să îți configurezi editorul tău să adauge 4 spații cănd apeși tasta tab. Problema cu utilizarea caracterelor tab este că alți programatori Python folosesc spații și dacă sunt folosite în combinație în același fișier atunci Python le va citi greșit (în cel mai bun caz, te va anunța, iar în cel mai rău caz vor apărea erori greu de identificat)."

#: ../../../source/functions.rst:76
msgid "A function for a square"
msgstr "O funcție pentru un pătrat"

#: ../../../source/functions.rst:79 ../../../source/functions.rst:120
msgid "Exercise"
msgstr "Exercițiu"

#: ../../../source/functions.rst:81
msgid ""
"Write a function that draws a square. Could you use this function to improve"
" the tilted squares program? If you change the program to use a function, is"
" it easier to experiment with?"
msgstr "Scrie o funție care desenează un pătrat. Poți utiliza această funcție pentru a îmbunătăți programul cu pătrate înclinate? Dacă schimbi programul pentru a folosi o funcție, este mai ușor să experimtentezi?"

#: ../../../source/functions.rst:88 ../../../source/functions.rst:142
msgid "Solution"
msgstr "Soluție"

#: ../../../source/functions.rst:117
msgid "A function for a hexagon"
msgstr "O funcție pentru un hexagon"

#: ../../../source/functions.rst:122
msgid "Write a function that draws a hexagon."
msgstr "Scrie o funcție care desenează un hexagon."

#: ../../../source/functions.rst:126
msgid ""
"Now combine that function into a honeycomb. Just make it with a single layer"
" like this:"
msgstr "Acum combină funcția aceasta într-un fagure. Creează un singur strat așa:"

#: ../../../source/functions.rst:130
msgid "Give it a good go!"
msgstr "Încearcă!"

#: ../../../source/functions.rst:134
msgid ""
"Make sure your hexagon function returns your turtle to exactly the same "
"position and angle it was before it was asked to draw the hexagon. This "
"makes it easier to reason about."
msgstr "Asigură-te că funcția ta hexagon întoarce țestoasa exact în aceeași poziție și unghi cum era înainte de a desena hexagonul. Este mai ușor să te gândești în acest fel."

#: ../../../source/functions.rst:156
msgid ""
"You could also put the ``turtle.forward(100); turtle.right(60)`` portion in "
"the function, but you better not call it ``hexagon`` in that case.  That's "
"misleading because it actually draws a hexagon and then advances to a "
"position where another hexagon would make sense in order to draw a "
"honeycomb.  If you ever wanted to reuse your hexagon function outside of "
"honeycombs, that would be confusing."
msgstr "Poți să pui partea cu``turtle.forward(100); turtle.right(60)`` direct în funcție, dar în acest caz ar fi mai bine să nu o denumești ``hexagon``. Asta ar fi derutant pentru că de fapt desenează un hexagon și pe urmă avansează într-o poziție în care un alt hexagon ar avea sens doar în cazul unui fagure. Dacă ai avea nevoie să reutilizezi funcția la altceva decât faguri, asta ar fi neașteptat."
