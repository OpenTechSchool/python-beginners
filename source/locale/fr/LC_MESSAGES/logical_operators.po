# 
msgid ""
msgstr ""
"Project-Id-Version: Introduction to Programming with Python 0.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-25 09:14\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../source/logical_operators.rst:2
msgid "Logical operators"
msgstr ""

#: ../../../source/logical_operators.rst:5
msgid "Introduction"
msgstr ""

#: ../../../source/logical_operators.rst:7
msgid ""
"Conditionals are a nice way to make decisions by asking if something equals "
"*True* or not. But often one condition is not enough. We may want to take "
"the opposite of our result. Or for instance if we want to make a decision "
"upon ``turtle.xcor()`` and ``turtle.ycor()`` we have to combine them. This "
"can be done with logical operators."
msgstr ""

#: ../../../source/logical_operators.rst:14
msgid "Negation of a statement"
msgstr ""

#: ../../../source/logical_operators.rst:16
msgid ""
"If we want something to be *False* we can use ``not``. It is a logical "
"operator::"
msgstr ""

#: ../../../source/logical_operators.rst:26
#: ../../../source/logical_operators.rst:64
msgid "Exercise"
msgstr ""

#: ../../../source/logical_operators.rst:28
msgid ""
"The turtle gives us a useful function to know if it is drawing or not: "
"``turtle.isdown()``.  This function returns *True* if the turtle is drawing."
" As we have seen earlier, the function ``turtle.penup()`` and "
"``turtle.pendown()`` toggle between drawing while moving, or just moving "
"without a trace."
msgstr ""

#: ../../../source/logical_operators.rst:33
msgid "Can we write a function that only goes forward if the pen is up?"
msgstr ""

#: ../../../source/logical_operators.rst:36
#: ../../../source/logical_operators.rst:71
msgid "Solution"
msgstr ""

#: ../../../source/logical_operators.rst:46
msgid "This and that or something else"
msgstr ""

#: ../../../source/logical_operators.rst:48
msgid ""
"Two easy to understand operators are ``and`` and ``or``. They do exactly "
"what they sound like:::"
msgstr ""

#: ../../../source/logical_operators.rst:60
msgid ""
"You are not restricted to one logical operator. You can combine as may as "
"you want."
msgstr ""

#: ../../../source/logical_operators.rst:66
msgid ""
"Earlier we put the turtle in a circular prison. This time let's make it a "
"box. If the turtle goes more than 100 in the X *or* Y axis then we turn the "
"turtle back around to the center."
msgstr ""
